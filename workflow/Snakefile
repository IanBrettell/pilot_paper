include: "rules/00_common.smk"
include: "rules/01_pre-processing.smk"
include: "rules/02_tracking.smk"
include: "rules/03_qc.smk"
include: "rules/04_hmm.smk"
include: "rules/05_param_optim.smk"
include: "rules/06_final_plots_and_vids.smk"

##### Target rules #####

rule all:
    input:
######################
## 01_pre-processing.smk
######################
## adjust_orientation
#        expand(os.path.join(config["working_dir"], "flipped/{sample}.avi"),
#                sample = SAMPLES
#        ),
## decompress_videos
#        expand(os.path.join(config["working_dir"], "decompressed/{sample}.avi"),
#                sample = SAMPLES
#        ),
## set_split_coords
#        expand("results/split_coord_images/{assay}/{sample}.png",
#                 zip,
#                assay = ASSAYS,
#                sample = SAMPLES
#        ),
# split_videos
#        expand(os.path.join(config["working_dir"], "split/{assay}/{sample}_{quadrant}.avi"),
#                 zip,
#                assay = ASSAYS,
#                sample = SAMPLES,
#                quadrant = QUADRANTS
#        ),
#        rules.get_split_video_dims.output,
#####################
# 02_tracking.smk
#####################
#        expand(os.path.join(
#                config["working_dir"],
#                "split/{assay}/session_{sample}_{quadrant}/trajectories/trajectories.npy"),
#                        zip,
#                        assay = ASSAYS,
#                        sample = SAMPLES,
#                        quadrant = QUADRANTS        
#        ),
## coloured_trails
#        expand(os.path.join(config["working_dir"], "split/{assay}/{sample}_{quadrant}_tracked.avi"),
#                zip,
#                assay = ASSAYS,
#                sample = SAMPLES,
#                quadrant = QUADRANTS    
#        ),
# trajectories_to_csv
#        expand(rules.trajectories_to_csv.output,
#                zip,
#                assay = ASSAYS,
#                sample = SAMPLES,
#                quadrant = QUADRANTS         
#        ),
#####################
# 03_qc.smk
#####################
#        expand(rules.assign_ref_test.output,
#                zip,
#                assay = ASSAYS,
#                sample = SAMPLES,
#                quadrant = QUADRANTS              
#        ),
#        rules.tracking_success.output,
#        expand(rules.coloured_trails_labels.output,
#                zip,
#                assay = ASSAYS,
#                sample = SAMPLES,
#                quadrant = QUADRANTS
#        ),
#        expand(rules.stitch_tracked_vids.output,
#                zip,
#                assay = AS_ASSAYS,
#                sample = AS_SAMPLES
#        ),
#        rules.pull_visual_check_sample.output,
#####################
# 04_hmm.smk
#####################
#        expand(rules.movement_metrics.output,
#                zip,
#                assay = ASSAYS_INT,
#                sample = SAMPLES_INT,
#                quadrant = QUADRANTS_INT,
#                interval = INTERVALS_INT   
#        ),
#        expand(rules.merge_csvs.output,
#                interval = config["seconds_interval"]
#        ),
#        expand(rules.run_hmm.output,
#                interval = config["seconds_interval"],
#                variables = config["hmm_variables"],
#                n_states = config["n_states"]
#        ),
#        expand(rules.hmm_concordance_out.output,
#                interval = config["seconds_interval"],
#                variables = config["hmm_variables"],
#                n_states = config["n_states"]               
#        ),  
######################
## 05_param_optim.smk
######################
#        expand(rules.recode_concordance.output,
#                interval = config["seconds_interval"],
#                variables = config["hmm_variables"],
#                n_states = config["n_states"]
#        ),
#        rules.run_kruskal_wallis.output,
#        rules.compare_params.output,
#####################
# 06_final_plots_and_vids.smk
#####################
#        expand(rules.covariate_effects.output,
#                zip,
#                interval = 0.08,
#                variables = "dist_angle",
#                n_states = 14
#        ),
        expand(rules.hmm_final.output,
                zip,
                interval = [0.08, 0.08, 0.05, 0.08, 0.1],
                variables = ["dist_angle", "dist_angle", "dist_angle", "dist_angle", "dist_angle"],
                n_states = [14, 15, 16, 16, 17]
        ),
#        expand(rules.spatial_dependence.output,
#                interval = 0.08,
#                variables = "dist_angle",
#                n_states = 15
#        ),
#        expand(rules.time_dependence.output,
#                interval = 0.08,
#                variables = "dist_angle",
#                n_states = 14
#        ),
#        expand(rules.sge_co_occupancy.output,
#                interval = 0.08,
#                variables = "dist_angle",
#                n_states = 15
#        ),
#        expand(rules.path_frames_to_vid.output,
#                interval = 0.08,
#                variables = "dist_angle",
#                n_states = 15,
#                assay = ASSAYS_ALL,
#                sample = list(set(AS_SAMPLES)),
#        ),
#        expand(rules.hmm_path_frames_to_vid.output,
#                interval = 0.08,
#                variables = "dist_angle",
#                n_states = 15,
#                assay = ASSAYS_ALL,
#                sample = list(set(AS_SAMPLES)),
#                ref_test = REF_TEST
#        ),
#        expand(rules.compile_four_panel_vid.output,
#                interval = 0.08,
#                variables = "dist_angle",
#                n_states = 15,
#                assay = ASSAYS_ALL,
#                sample = list(set(AS_SAMPLES))
#        ),
#        expand(rules.four_panel_short.output,
#                interval = 0.08,
#                variables = "dist_angle",
#                n_states = 15,
#                assay = ASSAYS_ALL,
#                sample = list(set(AS_SAMPLES)),
#        ),
#        expand(rules.get_labels_and_paths_frame_grab.output,
#                interval = 0.08,
#                variables = "dist_angle",
#                n_states = 15,
#                assay = "open_field",
#                sample = "20190613_1054_icab_hdr_R",
#                second = 110 
#        ),
#        rules.send_plots_to_google_drive.output,


