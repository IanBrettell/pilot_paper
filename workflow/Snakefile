include: "rules/00_common.smk"
include: "rules/01_pre-processing.smk"
include: "rules/02_tracking.smk"
include: "rules/03_qc.smk"
include: "rules/04_hmm.smk"
include: "rules/05_param_optim.smk"
include: "rules/06_final_plots_and_vids.smk"
include: "rules/07_sge_analysis.smk"

##### Target rules #####

rule all:
    input:
######################
## 01_pre-processing.smk
######################
## adjust_orientation
#        expand(os.path.join(config["working_dir"], "flipped/{sample}.avi"),
#                sample = SAMPLES
#        ),
## decompress_videos
#        expand(os.path.join(config["working_dir"], "decompressed/{sample}.avi"),
#                sample = SAMPLES
#        ),
## set_split_coords
#        expand("results/split_coord_images/{assay}/{sample}.png",
#                 zip,
#                assay = ASSAYS,
#                sample = SAMPLES
#        ),
## split_videos
#        expand(os.path.join(config["working_dir"], "split/{assay}/{sample}_{quadrant}.avi"),
#                 zip,
#                assay = ASSAYS,
#                sample = SAMPLES,
#                quadrant = QUADRANTS
#        ),
        rules.get_split_video_dims.output,
#####################
# 02_tracking.smk
#####################
## track_videos
#        expand(os.path.join(
#                config["working_dir"],
#                "split/{assay}/session_{sample}_{quadrant}/trajectories/trajectories.npy"),
#                        zip,
#                        assay = ASSAYS,
#                        sample = SAMPLES,
#                        quadrant = QUADRANTS        
#        ),
## coloured_trails
#        expand(os.path.join(config["working_dir"], "split/{assay}/{sample}_{quadrant}_tracked.avi"),
#                zip,
#                assay = ASSAYS,
#                sample = SAMPLES,
#                quadrant = QUADRANTS    
#        ),
## trajectories_to_csv
#        expand(os.path.join(config["data_store_dir"], "split/{assay}/session_{sample}_{quadrant}/trajectories/trajectories.trajectories.csv"),
#                zip,
#                assay = ASSAYS,
#                sample = SAMPLES,
#                quadrant = QUADRANTS         
#        ),
#####################
# 03_qc.smk
#####################
## assign_ref_test
#        expand(os.path.join(
#            config["data_store_dir"],
#            "final_tracks/{assay}/{sample}_{quadrant}.csv"),
#                zip,
#                assay = ASSAYS,
#                sample = SAMPLES,
#                quadrant = QUADRANTS              
#        ),
## tracking_success
#                "config/tracking_success.csv",
        expand(rules.coloured_trails_labels.output,
                zip,
                assay = ASSAYS,
                sample = SAMPLES,
                quadrant = QUADRANTS
        ),
#####################
# 04_hmm.smk
#####################
## movement_metrics
#        expand(os.path.join(
#            config["working_dir"],
#            "with_metrics/{assay}/{sample}/{quadrant}/{interval}.csv"),
#                zip,
#                assay = ASSAYS_INT,
#                sample = SAMPLES_INT,
#                quadrant = QUADRANTS_INT,
#                interval = INTERVALS_INT   
#        ),
## merge_csvs
#        expand(os.path.join(
#            config["working_dir"],
#            "merged/{interval}.csv"
#            ),
#                interval = config["seconds_interval"]
#        ),
#        expand(rules.run_hmm.output,
#                interval = config["seconds_interval"],
#                variables = config["hmm_variables"],
#                n_states = config["n_states"]
#        ),
#        expand(rules.hmm_concordance_out.output,
#                interval = config["seconds_interval"],
#                variables = config["hmm_variables"],
#                n_states = config["n_states"]               
#        ),  
#####################
# 05_param_optim.smk
#####################
#        expand(rules.recode_concordance.output,
#                interval = config["seconds_interval"],
#                variables = config["hmm_variables"],
#                n_states = config["n_states"]
#        ),
#        rules.run_kruskal_wallis.output,
#        rules.compare_params.output,
#####################
# 06_final_plots_and_vids.smk
#####################
#        expand(rules.covariate_effects.output,
#                zip,
#                interval = [0.08, 0.05, 0.05],
#                variables = ["dist_angle", "dist_angle", "dist_angle"],
#                n_states = [15, 16, 18]
#        ),
#        expand(rules.hmm_final.output,
#                zip,
#                interval = [0.08, 0.05, 0.05],
#                variables = ["dist_angle", "dist_angle", "dist_angle"],
#                n_states = [15, 16, 18]
#        ),
        expand(rules.spatial_dependence.output,
                interval = 0.08,
                variables = "dist_angle",
                n_states = 15
        ),
        expand(rules.time_dependence.output,
                interval = 0.08,
                variables = "dist_angle",
                n_states = 15
        ),
#        expand(rules.path_plots.output,
#                interval = 0.08,
#                variables = "dist_angle",
#                n_states = 15,
#                sample = list(set(SAMPLES))
#        ),
#####################
# 07_sge_analysis.smk
#####################
        expand(rules.sge_co_occupancy.output,
                interval = 0.08,
                variables = "dist_angle",
                n_states = 15
        ),