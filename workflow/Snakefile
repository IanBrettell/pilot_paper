include: "rules/00_common.smk"

##### Target rules #####

rule all:
    input:
######################
## 01_pre-processing.smk
######################
## adjust_orientation
#        expand(os.path.join(config["working_dir"], "flipped/{sample}.avi"),
#                sample = SAMPLES
#        ),
## decompress_videos
#        expand(os.path.join(config["working_dir"], "decompressed/{sample}.avi"),
#                sample = SAMPLES
#        ),
## set_split_coords
#        expand("results/split_coord_images/{assay}/{sample}.png",
#                 zip,
#                assay = ASSAYS,
#                sample = SAMPLES
#        ),
## split_videos
#        expand(os.path.join(config["working_dir"], "split/{assay}/{sample}_{quadrant}.avi"),
#                 zip,
#                assay = ASSAYS,
#                sample = SAMPLES,
#                quadrant = QUADRANTS
#        ),
#####################
# 02_tracking.smk
#####################
## track_videos
#        expand(os.path.join(
#                config["working_dir"],
#                "split/{assay}/session_{sample}_{quadrant}/trajectories/trajectories.npy"),
#                        zip,
#                        assay = ASSAYS,
#                        sample = SAMPLES,
#                        quadrant = QUADRANTS        
#        ),
## coloured_trails
#        expand(os.path.join(config["working_dir"], "split/{assay}/{sample}_{quadrant}_tracked.avi"),
#                zip,
#                assay = ASSAYS,
#                sample = SAMPLES,
#                quadrant = QUADRANTS    
#        ),
## trajectories_to_csv
#        expand(os.path.join(config["data_store_dir"], "split/{assay}/session_{sample}_{quadrant}/trajectories/trajectories.trajectories.csv"),
#                zip,
#                assay = ASSAYS,
#                sample = SAMPLES,
#                quadrant = QUADRANTS         
#        ),
#####################
# 03_qc.smk
#####################
## assign_ref_test
#        expand(os.path.join(
#            config["data_store_dir"],
#            "final_tracks/{assay}/{sample}_{quadrant}.csv"),
#                zip,
#                assay = ASSAYS,
#                sample = SAMPLES,
#                quadrant = QUADRANTS              
#        ),
## tracking_success
#                "config/tracking_success.csv",
#####################
# 04_hmm.smk
#####################
## movement_metrics
#        expand(os.path.join(
#            config["working_dir"],
#            "with_metrics/{assay}/{sample}/{quadrant}/{interval}.csv"),
#                zip,
#                assay = ASSAYS_INT,
#                sample = SAMPLES_INT,
#                quadrant = QUADRANTS_INT,
#                interval = INTERVALS_INT   
#        ),
## merge_csvs
#        expand(os.path.join(
#            config["working_dir"],
#            "merged/{interval}.csv"
#            ),
#                interval = config["seconds_interval"]
#        ),
## run_hmm
#        expand(os.path.join(
#            config["working_dir"],
#            "hmm_out/{interval}/{variables}/{n_states}.csv"),
#                interval = config["seconds_interval"],
#                variables = config["hmm_variables"],
#                n_states = config["n_states"]
#        ),
## hmm_concordance_in
#        expand(os.path.join(
#            config["working_dir"],
#            "hmm_concordance_in/{interval}/A.csv"),
#                interval = config["seconds_interval"]
#        ),
# hmm_concordance_out
        expand(os.path.join(
            config["working_dir"],
            "hmm_concordance_out/{interval}/{variables}/{n_states}.csv"),
                interval = config["seconds_interval"],
                variables = config["hmm_variables"],
                n_states = config["n_states"]               
        ),  
##### Modules #####

include: "rules/01_pre-processing.smk"
include: "rules/02_tracking.smk"
include: "rules/03_qc.smk"
include: "rules/04_hmm.smk"