[{"path":"index.html","id":"about","chapter":"1 About","heading":"1 About","text":"book sets analysis medaka approach/avoidance behaviour using 5 established inbred strains.","code":""},{"path":"hmm-parameter-optimisation.html","id":"hmm-parameter-optimisation","chapter":"2 HMM parameter optimisation","heading":"2 HMM parameter optimisation","text":"Using adapted code rule compare_params https://github.com/brettellebi/pilot_paper/blob/master/workflow/rules/05_param_optim.smkPipeline script: https://github.com/brettellebi/pilot_paper/blob/master/workflow/scripts/compare_params.R","code":"\nlibrary(tidyverse)\n#> ── Attaching packages ─────────────────── tidyverse 1.3.1 ──\n#> ✓ ggplot2 3.3.5     ✓ purrr   0.3.4\n#> ✓ tibble  3.1.6     ✓ dplyr   1.0.8\n#> ✓ tidyr   1.2.0     ✓ stringr 1.4.0\n#> ✓ readr   2.1.2     ✓ forcats 0.5.1\n#> ── Conflicts ────────────────────── tidyverse_conflicts() ──\n#> x dplyr::filter() masks stats::filter()\n#> x dplyr::lag()    masks stats::lag()\nlibrary(plotly)\n#> \n#> Attaching package: 'plotly'\n#> The following object is masked from 'package:ggplot2':\n#> \n#>     last_plot\n#> The following object is masked from 'package:stats':\n#> \n#>     filter\n#> The following object is masked from 'package:graphics':\n#> \n#>     layout"},{"path":"hmm-parameter-optimisation.html","id":"read-in-files","chapter":"2 HMM parameter optimisation","heading":"2.1 Read in files","text":"","code":"\nCONC = list.files(\"/hps/nobackup/birney/users/ian/pilot/hmm_concordance_recode/\",full.names = T, recursive = T)\nKW = \"/hps/nobackup/birney/users/ian/pilot/kruskal_wallis/out.rds\""},{"path":"hmm-parameter-optimisation.html","id":"process","chapter":"2 HMM parameter optimisation","heading":"2.2 Process","text":"","code":"\nkw = readRDS(KW) %>% \n  dplyr::mutate(INTERVAL = as.numeric(INTERVAL)) %>% \n  dplyr::mutate(N_STATES = as.numeric(N_STATES))\n\nconc = purrr::map_dfr(CONC, readRDS) %>% \n  dplyr::group_by(INTERVAL, N_STATES) %>% \n  # get mean across groups A and B\n  dplyr::summarise(MEAN_CONC = mean(CONCORDANCE))\n#> `summarise()` has grouped output by 'INTERVAL'. You can\n#> override using the `.groups` argument.\n\ndf = dplyr::left_join(kw, conc, by = c(\"INTERVAL\", \"N_STATES\"))"},{"path":"hmm-parameter-optimisation.html","id":"plot","chapter":"2 HMM parameter optimisation","heading":"2.3 Plot","text":"","code":"\npal = colorspace::sequential_hcl(length(unique(df$N_STATES)), palette = \"ag_Sunset\")\n\nout_plot = df %>% \n  dplyr::mutate(N_STATES = factor(N_STATES, levels = sort(unique(N_STATES)))) %>% \n  dplyr::mutate(INTERVAL = factor(INTERVAL, levels = sort(unique(INTERVAL)))) %>% \n  ggplot(aes(MEAN_CONC, SUM_KW_STAT)) +\n    geom_point(aes(size = INTERVAL, colour = N_STATES),\n               alpha = 0.8) +\n    ggrepel::geom_text_repel(aes(label = INTERVAL),\n              size = 2,\n              ) +\n    theme_bw() +\n    guides(size = guide_legend(title = \"Interval\\n(seconds)\"),\n           colour = guide_legend(title = \"N states\")) +\n    scale_colour_manual(values = pal) +\n    xlab(\"mean concordance between cross-validated HMM states\") +\n    ylab(\"summed Kruskal-Wallis statistic comparing frequency\\nof time spent in each HMM state across medaka lines\")\n\nplotly::ggplotly(out_plot)\n#> Warning: Using size for a discrete variable is not advised.\n#> Warning in geom2trace.default(dots[[1L]][[1L]], dots[[2L]][[1L]], dots[[3L]][[1L]]): geom_GeomTextRepel() has yet to be implemented in plotly.\n#>   If you'd like to see this geom implemented,\n#>   Please open an issue with your example code at\n#>   https://github.com/ropensci/plotly/issues"}]
