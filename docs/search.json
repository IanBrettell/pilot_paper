[{"path":"index.html","id":"about","chapter":"1 About","heading":"1 About","text":"book sets analysis medaka approach/avoidance behaviour using 5 established inbred strains.","code":""},{"path":"hmm-parameter-optimisation.html","id":"hmm-parameter-optimisation","chapter":"2 HMM parameter optimisation","heading":"2 HMM parameter optimisation","text":"Using adapted code rule compare_params https://github.com/brettellebi/pilot_paper/blob/master/workflow/rules/05_param_optim.smkPipeline script: https://github.com/brettellebi/pilot_paper/blob/master/workflow/scripts/compare_params.R","code":"\nlibrary(tidyverse)\nlibrary(plotly)"},{"path":"hmm-parameter-optimisation.html","id":"read-in-files","chapter":"2 HMM parameter optimisation","heading":"2.1 Read in files","text":"","code":"\nCONC = list.files(\"/hps/nobackup/birney/users/ian/pilot/hmm_concordance_recode/\",full.names = T, recursive = T)\nKW = \"/hps/nobackup/birney/users/ian/pilot/kruskal_wallis/out.rds\""},{"path":"hmm-parameter-optimisation.html","id":"process","chapter":"2 HMM parameter optimisation","heading":"2.2 Process","text":"","code":"\nkw = readRDS(KW) %>% \n  dplyr::mutate(INTERVAL = as.numeric(INTERVAL)) %>% \n  dplyr::mutate(N_STATES = as.numeric(N_STATES))\n\nconc = purrr::map_dfr(CONC, readRDS) %>% \n  dplyr::group_by(INTERVAL, N_STATES) %>% \n  # get mean across groups A and B\n  dplyr::summarise(MEAN_CONC = mean(CONCORDANCE))\n#> `summarise()` has grouped output by 'INTERVAL'. You can\n#> override using the `.groups` argument.\n\ndf = dplyr::left_join(kw, conc, by = c(\"INTERVAL\", \"N_STATES\"))"},{"path":"hmm-parameter-optimisation.html","id":"plot","chapter":"2 HMM parameter optimisation","heading":"2.3 Plot","text":"","code":"\npal = colorspace::sequential_hcl(length(unique(df$N_STATES)), palette = \"ag_Sunset\")\n\nout_plot = df %>% \n  dplyr::mutate(N_STATES = factor(N_STATES, levels = sort(unique(N_STATES)))) %>% \n  dplyr::mutate(INTERVAL = factor(INTERVAL, levels = sort(unique(INTERVAL)))) %>% \n  ggplot(aes(MEAN_CONC, SUM_KW_STAT)) +\n    geom_point(aes(size = INTERVAL, colour = N_STATES),\n               alpha = 0.8) +\n    theme_bw() +\n    guides(size = guide_legend(title = \"Interval\\n(seconds)\"),\n           colour = guide_legend(title = \"N states\")) +\n    scale_colour_manual(values = pal) +\n    xlab(\"mean concordance between cross-validated HMM states\") +\n    ylab(\"summed Kruskal-Wallis statistic comparing frequency\\nof time spent in each HMM state across medaka lines\")\n\nplotly::ggplotly(out_plot)\n#> Warning: Using size for a discrete variable is not advised."},{"path":"model-covariates.html","id":"model-covariates","chapter":"3 Model covariates","heading":"3 Model covariates","text":"","code":"\nlibrary(tidyverse)\nlibrary(DT)"},{"path":"model-covariates.html","id":"read-in-data","chapter":"3 Model covariates","heading":"3.1 Read in data","text":"","code":"\nIN = \"/hps/nobackup/birney/users/ian/pilot/hmm_out/0.05/dist_angle/18.csv\"\n# Read \n\ndf = readr::read_csv(IN)\n#> Rows: 14651580 Columns: 15\n#> ── Column specification ────────────────────────────────────\n#> Delimiter: \",\"\n#> chr (6): assay, ref_fish, test_fish, tank_side, quadrant...\n#> dbl (9): date, time, frame, seconds, x, y, distance, ang...\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Controls (iCab-iCab pairings only)\n\ndf_control = df %>% \n  # Filter for only iCabs paired with iCabs\n  dplyr::filter(test_fish == \"icab\") %>% \n  # Get individual\n  tidyr::unite(date, time, quadrant, fish,\n               col = \"indiv\", \n               remove = F) %>% \n  # Group by assay and individual to get mean speed\n  dplyr::group_by(assay, date, time, quadrant, indiv) %>% \n  # Calculate mean speed\n  dplyr::summarise(mean_speed = mean(distance)) %>% \n  dplyr::ungroup() %>% \n  # Make date a factor\n  dplyr::mutate(date = as.factor(date))\n#> `summarise()` has grouped output by 'assay', 'date',\n#> 'time', 'quadrant'. You can override using the `.groups`\n#> argument.\n\n\n# DGE data frame\n\ndf_dge = df %>% \n  # remove iCab when paired with a different test fish\n  dplyr::filter(!(fish == \"ref\" & test_fish != \"icab\")) %>% \n  # Get individual\n  tidyr::unite(date, time, quadrant, fish,\n               col = \"indiv\", \n               remove = F) %>% \n  # add `line` %>% \n  dplyr::mutate(line = dplyr::case_when(fish == \"ref\" ~ ref_fish,\n                                        fish == \"test\" ~ test_fish))  %>% \n  # Group by assay and individual to get mean speed\n  dplyr::group_by(assay, date, time, quadrant, line, indiv) %>% \n  # Calculate mean speed\n  dplyr::summarise(mean_speed = mean(distance)) %>% \n  dplyr::ungroup() %>% \n  # Convert `date` to factor\n  dplyr::mutate(date = factor(date, levels = unique(df$date)))\n#> `summarise()` has grouped output by 'assay', 'date',\n#> 'time', 'quadrant', 'line'. You can override using the\n#> `.groups` argument.\n\n# SGE data frame \n\ndf_sge = df %>% \n  # keep only iCabs\n  ## add `line`\n  dplyr::mutate(line = dplyr::case_when(fish == \"ref\" ~ ref_fish,\n                                        fish == \"test\" ~ test_fish)) %>% \n  # keep only iCab test fishes\n  dplyr::filter(line == \"icab\") %>% \n  # Get individual\n  tidyr::unite(date, time, quadrant, fish,\n               col = \"indiv\", \n               remove = F) %>% \n  # Group by assay and individual to get mean speed\n  dplyr::group_by(assay, date, time, quadrant, test_fish, indiv) %>% \n  # Calculate mean speed\n  dplyr::summarise(mean_speed = mean(distance)) %>% \n  dplyr::ungroup()\n#> `summarise()` has grouped output by 'assay', 'date',\n#> 'time', 'quadrant', 'test_fish'. You can override using the\n#> `.groups` argument."},{"path":"model-covariates.html","id":"controls","chapter":"3 Model covariates","heading":"3.2 Controls","text":"","code":"\n# Separate by assay\ndf_control_of = df_control %>% \n  dplyr::filter(assay == \"open_field\")\n\ndf_control_no = df_control %>% \n  dplyr::filter(assay == \"novel_object\")\n\nmodel_fit_of = lm(mean_speed ~ date + time + quadrant, data = df_control_of)\n\nmodel_fit_no = lm(mean_speed ~ date + time + quadrant, data = df_control_no)\n\nsummary(model_fit_of)\n#> \n#> Call:\n#> lm(formula = mean_speed ~ date + time + quadrant, data = df_control_of)\n#> \n#> Residuals:\n#>      Min       1Q   Median       3Q      Max \n#> -1.27802 -0.28921  0.07469  0.32925  1.29864 \n#> \n#> Coefficients:\n#>                Estimate Std. Error t value Pr(>|t|)    \n#> (Intercept)   1.3653659  0.3420269   3.992  0.00011 ***\n#> date20190612  0.2601871  0.2286833   1.138  0.25736    \n#> date20190614  0.8020814  0.2425613   3.307  0.00123 ** \n#> date20190615  0.4432846  0.2193359   2.021  0.04538 *  \n#> date20190616  0.5258515  0.2141126   2.456  0.01540 *  \n#> time          0.0001055  0.0002000   0.528  0.59876    \n#> quadrantq2    0.1527986  0.1358049   1.125  0.26265    \n#> quadrantq3    0.0925545  0.1358049   0.682  0.49678    \n#> quadrantq4   -0.1949450  0.1358049  -1.435  0.15361    \n#> ---\n#> Signif. codes:  \n#> 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> Residual standard error: 0.5599 on 127 degrees of freedom\n#> Multiple R-squared:  0.1522, Adjusted R-squared:  0.09878 \n#> F-statistic:  2.85 on 8 and 127 DF,  p-value: 0.006037\nsummary(model_fit_no)\n#> \n#> Call:\n#> lm(formula = mean_speed ~ date + time + quadrant, data = df_control_no)\n#> \n#> Residuals:\n#>     Min      1Q  Median      3Q     Max \n#> -1.3553 -0.3706  0.0544  0.3735  1.4014 \n#> \n#> Coefficients:\n#>                Estimate Std. Error t value Pr(>|t|)   \n#> (Intercept)   1.061e+00  3.346e-01   3.171   0.0019 **\n#> date20190612  1.351e-01  2.237e-01   0.604   0.5470   \n#> date20190614  5.042e-01  2.373e-01   2.125   0.0355 * \n#> date20190615  2.760e-01  2.146e-01   1.286   0.2007   \n#> date20190616  2.668e-01  2.095e-01   1.274   0.2050   \n#> time          9.476e-05  1.957e-04   0.484   0.6290   \n#> quadrantq2    1.742e-01  1.329e-01   1.311   0.1921   \n#> quadrantq3    1.112e-01  1.329e-01   0.837   0.4042   \n#> quadrantq4   -2.323e-01  1.329e-01  -1.749   0.0828 . \n#> ---\n#> Signif. codes:  \n#> 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> Residual standard error: 0.5478 on 127 degrees of freedom\n#> Multiple R-squared:  0.1211, Adjusted R-squared:  0.06574 \n#> F-statistic: 2.187 on 8 and 127 DF,  p-value: 0.03254"},{"path":"model-covariates.html","id":"dge","chapter":"3 Model covariates","heading":"3.3 DGE","text":"","code":"\n## All variables with interactions\nmodel_dge_of = aov(mean_speed ~ date + time + quadrant + line,\n                   data = df_dge %>% \n                     dplyr::filter(assay == \"open_field\"))\n\nmodel_dge_no = aov(mean_speed ~ date + time + quadrant + line,\n                   data = df_dge %>% \n                     dplyr::filter(assay == \"novel_object\"))\n\ndge_vars_of = summary(model_dge_of)[[1]] %>% \n  dplyr::mutate(TOT_SS = sum(`Sum Sq`),\n                PROP_SS = `Sum Sq` / TOT_SS,\n                VAR_EXP = PROP_SS * 100)\n\ndge_vars_no = summary(model_dge_no)[[1]] %>% \n  dplyr::mutate(TOT_SS = sum(`Sum Sq`),\n                PROP_SS = `Sum Sq` / TOT_SS,\n                VAR_EXP = PROP_SS * 100)\n\nDT::datatable(dge_vars_of)"},{"path":"model-covariates.html","id":"sge","chapter":"3 Model covariates","heading":"3.4 SGE","text":"","code":"\nmodel_sge = aov(mean_speed ~ assay * date * time * quadrant * test_fish, data = df_sge)\n\nsge_vars = summary(model_sge)[[1]] %>% \n  dplyr::mutate(TOT_SS = sum(`Sum Sq`),\n                PROP_SS = `Sum Sq` / TOT_SS,\n                VAR_EXP = PROP_SS * 100)\n\nDT::datatable(sge_vars)"},{"path":"model-proportion-of-time-spent-in-hmm-states.html","id":"model-proportion-of-time-spent-in-hmm-states","chapter":"4 Model proportion of time spent in HMM states","heading":"4 Model proportion of time spent in HMM states","text":"","code":"\nlibrary(tidyverse)\nlibrary(DT)\nlibrary()"},{"path":"model-proportion-of-time-spent-in-hmm-states.html","id":"read-in-and-clean-data","chapter":"4 Model proportion of time spent in HMM states","heading":"4.1 Read in and clean data","text":"","code":"\nIN = \"/hps/nobackup/birney/users/ian/pilot/hmm_out/0.08/dist_angle/15.csv\"\nN_STATES = 15\n# Read \n\nraw = readr::read_csv(IN)\n#> Rows: 9153444 Columns: 15\n#> ── Column specification ────────────────────────────────────\n#> Delimiter: \",\"\n#> chr (6): assay, ref_fish, test_fish, tank_side, quadrant...\n#> dbl (9): date, time, frame, seconds, x, y, distance, ang...\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Create line recode vector\nline_vec = c(\"iCab\", \"HdrR\", \"HNI\", \"Kaga\", \"HO5\")\nnames(line_vec) = c(\"icab\", \"hdr\", \"hni\", \"kaga\", \"ho5\")\n\n# Clean\n\ndf = raw %>% \n  # Get individual\n  tidyr::unite(date, time, quadrant, fish,\n               col = \"indiv\", \n               remove = F) %>% \n  # add `line` %>% \n  dplyr::mutate(line = dplyr::case_when(fish == \"ref\" ~ ref_fish,\n                                        fish == \"test\" ~ test_fish)) %>% \n  # recode and order `assay` \n  dplyr::mutate(assay = stringr::str_replace(assay, pattern = \"_\", \" \"),\n                assay = factor(assay, levels = c(\"open field\", \"novel object\"))) %>% \n  # recode and order `line`\n  dplyr::mutate(line = dplyr::recode(line, !!!line_vec),\n                line = factor(line, levels = line_vec)) %>% \n  # convert `date` to factor\n  dplyr::mutate(date = factor(date))\n\n# Recode states by mean distance\n\nrank_df = df %>% \n  dplyr::group_by(state) %>% \n  dplyr::summarise(mean_dist = mean(distance)) %>% \n  # rank\n  dplyr::arrange(mean_dist) %>% \n  dplyr::mutate(rank = 1:nrow(.))\n\nrecode_vec = rank_df %>% \n  dplyr::pull(rank)\nnames(recode_vec) = rank_df %>% \n  dplyr::pull(state)\n\n# Recode `state`\n\ndf = df %>% \n  dplyr::mutate(state_recode = dplyr::recode(state, !!!recode_vec),\n                state_recode = factor(state_recode, levels = recode_vec))"},{"path":"model-proportion-of-time-spent-in-hmm-states.html","id":"dge-1","chapter":"4 Model proportion of time spent in HMM states","heading":"4.2 DGE","text":"","code":"\n# Get proportion of time each fish spent in each state\ndf_dge = df %>% \n  # remove iCab when paired with a different test fish\n  dplyr::filter(!(fish == \"ref\" & test_fish != \"icab\")) %>% \n  ## count rows per fish per state\n  dplyr::count(indiv, assay, line, date, time, quadrant, tank_side, state_recode) %>% \n  # add total row count per fish\n  dplyr::add_count(indiv, assay, line, date, time, quadrant, tank_side, wt = n, name = \"nn\") %>% \n  # get proportion of time fish spent in each state\n  dplyr::mutate(state_freq = n / nn)\n\n# Split by assay\n\ndf_dge %>% \n  ggplot() + \n  geom_histogram(aes(state_freq, fill = state_recode),\n                 bins = 40) +\n  facet_grid(rows = vars(state_recode),\n             cols = vars(assay)) +\n  theme_bw() +\n  scale_fill_viridis_d() +\n  guides(fill = \"none\")"},{"path":"model-proportion-of-time-spent-in-hmm-states.html","id":"inverse-normalise","chapter":"4 Model proportion of time spent in HMM states","heading":"4.2.1 Inverse-normalise","text":"","code":"\n# Add function\ninvnorm = function(x) {\n  res = rank(x)\n  res = qnorm(res/(length(res)+0.5))\n  return(res)\n}\n\ndf_dge = df_dge %>% \n  dplyr::group_by(assay, state_recode) %>% \n  dplyr::mutate(state_freq_invnorm = invnorm(state_freq)) %>% \n  dplyr::ungroup() %>% \n  dplyr::arrange(indiv, assay, line, date, time, quadrant, tank_side, state_recode)\n\ndf_dge %>% \n  ggplot() + \n  geom_histogram(aes(state_freq_invnorm, fill = state_recode),\n                 bins = 40) +\n  facet_grid(rows = vars(state_recode),\n             cols = vars(assay)) +\n  theme_bw() +\n  scale_fill_viridis_d() +\n  guides(fill = \"none\")"},{"path":"model-proportion-of-time-spent-in-hmm-states.html","id":"calculate-variance-explained","chapter":"4 Model proportion of time spent in HMM states","heading":"4.2.2 Calculate variance explained","text":"","code":"\naov_dge = df_dge %>% \n  dplyr::group_by(assay, state_recode) %>% \n  tidyr::nest() %>%\n  dplyr::mutate(model = purrr::map(data, ~aov(\n    state_freq_invnorm ~ date + time + quadrant + tank_side + line,\n    data = .))) %>%\n  select(-data) %>% \n  dplyr::mutate(model_tidy = purrr::map(model, broom::tidy)) %>%\n  tidyr::unnest(model_tidy) %>% \n  rstatix::add_significance(p.col = \"p.value\")\n\nDT::datatable(aov_dge %>% \n                dplyr::select(-model),\n              options = list(pageLength = nrow(aov_dge)))"},{"path":"model-proportion-of-time-spent-in-hmm-states.html","id":"save-to-google-drive","chapter":"4 Model proportion of time spent in HMM states","heading":"4.2.3 Save to Google Drive","text":"aov_state_freq : https://docs.google.com/spreadsheets/d/1_l72BZkmWyNAOfCUI8WGP4UfQuIPQtPZZmlRjQffvEs","code":"\naov_dge %>% \n  dplyr::select(-model) %>% \n  # add variance explained\n  dplyr::group_by(assay, state_recode) %>% \n  dplyr::mutate(tot_ss = sum(sumsq)) %>% \n  dplyr::ungroup() %>% \n  dplyr::mutate(var_expl_perc = (sumsq / tot_ss) * 100 ) %>%\n  googlesheets4::write_sheet(\n    ss = \"https://docs.google.com/spreadsheets/d/1_l72BZkmWyNAOfCUI8WGP4UfQuIPQtPZZmlRjQffvEs\",\n    sheet = \"DGE\")\n#> ! Using an auto-discovered, cached token.\n#>   To suppress this message, modify your code or options to\n#>   clearly consent to the use of a cached token.\n#>   See gargle's \"Non-interactive auth\" vignette for more\n#>   details:\n#>   <https://gargle.r-lib.org/articles/non-interactive-auth.html>\n#> ℹ The googlesheets4 package is using a cached token for\n#>   'brettell@ebi.ac.uk'.\n#> Auto-refreshing stale OAuth token.\n#> ✔ Writing to \"aov_state_freq\".\n#> ✔ Writing to sheet 'DGE'."},{"path":"model-proportion-of-time-spent-in-hmm-states.html","id":"sge-1","chapter":"4 Model proportion of time spent in HMM states","heading":"4.3 SGE","text":"","code":"\n# Get proportion of time each fish spent in each state\ndf_sge = df %>% \n  # take all iCab fishes\n  dplyr::filter(line == \"iCab\") %>% \n  ## count rows per fish per state\n  dplyr::count(indiv, assay, test_fish, date, time, quadrant, tank_side, state_recode) %>% \n  # add total row count per fish\n  dplyr::add_count(indiv, assay, test_fish, date, time, quadrant, tank_side, wt = n, name = \"nn\") %>% \n  # get proportion of time fish spent in each state\n  dplyr::mutate(state_freq = n / nn)\n\n# Split by assay\n\ndf_sge %>% \n  ggplot() + \n  geom_histogram(aes(state_freq, fill = state_recode),\n                 bins = 40) +\n  facet_grid(rows = vars(state_recode),\n             cols = vars(assay)) +\n  theme_bw() +\n  scale_fill_viridis_d(option = \"inferno\") +\n  guides(fill = \"none\")"},{"path":"model-proportion-of-time-spent-in-hmm-states.html","id":"inverse-normalise-1","chapter":"4 Model proportion of time spent in HMM states","heading":"4.3.1 Inverse-normalise","text":"","code":"\ndf_sge = df_sge %>% \n  dplyr::group_by(assay, state_recode) %>% \n  dplyr::mutate(state_freq_invnorm = invnorm(state_freq)) %>% \n  dplyr::ungroup() %>% \n  dplyr::arrange(indiv, assay, test_fish, date, time, quadrant, tank_side, state_recode)\n\ndf_sge %>% \n  ggplot() + \n  geom_histogram(aes(state_freq_invnorm, fill = state_recode),\n                 bins = 40) +\n  facet_grid(rows = vars(state_recode),\n             cols = vars(assay)) +\n  theme_bw() +\n  scale_fill_viridis_d(option = \"inferno\") +\n  guides(fill = \"none\")"},{"path":"model-proportion-of-time-spent-in-hmm-states.html","id":"calculate-variance-explained-1","chapter":"4 Model proportion of time spent in HMM states","heading":"4.3.2 Calculate variance explained","text":"","code":"\naov_sge = df_sge %>% \n  dplyr::group_by(assay, state_recode) %>% \n  tidyr::nest() %>%\n  dplyr::mutate(model = purrr::map(data, ~aov(\n    state_freq_invnorm ~ date + time + quadrant + tank_side + test_fish,\n    data = .))) %>%\n  select(-data) %>% \n  dplyr::mutate(model_tidy = purrr::map(model, broom::tidy)) %>%\n  tidyr::unnest(model_tidy) %>% \n  rstatix::add_significance(p.col = \"p.value\")\n\nDT::datatable(aov_sge %>% \n                dplyr::select(-model),\n              options = list(pageLength = nrow(aov_sge)))"},{"path":"model-proportion-of-time-spent-in-hmm-states.html","id":"save-to-google-drive-1","chapter":"4 Model proportion of time spent in HMM states","heading":"4.3.3 Save to Google Drive","text":"aov_state_freq : https://docs.google.com/spreadsheets/d/1_l72BZkmWyNAOfCUI8WGP4UfQuIPQtPZZmlRjQffvEs","code":"\naov_sge %>% \n  dplyr::select(-model) %>% \n  # add variance explained\n  dplyr::group_by(assay, state_recode) %>% \n  dplyr::mutate(tot_ss = sum(sumsq)) %>% \n  dplyr::ungroup() %>% \n  dplyr::mutate(var_expl_perc = (sumsq / tot_ss) * 100 ) %>%\n  googlesheets4::write_sheet(\n    ss = \"https://docs.google.com/spreadsheets/d/1_l72BZkmWyNAOfCUI8WGP4UfQuIPQtPZZmlRjQffvEs\",\n    sheet = \"SGE\")\n#> ✔ Writing to \"aov_state_freq\".\n#> ✔ Writing to sheet 'SGE'."}]
