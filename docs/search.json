[{"path":"index.html","id":"about","chapter":"1 About","heading":"1 About","text":"book sets analysis medaka approach/avoidance behaviour using 5 established inbred strains.","code":""},{"path":"hmm-parameter-optimisation.html","id":"hmm-parameter-optimisation","chapter":"2 HMM parameter optimisation","heading":"2 HMM parameter optimisation","text":"Using adapted code rule compare_params https://github.com/brettellebi/pilot_paper/blob/master/workflow/rules/05_param_optim.smkPipeline script: https://github.com/brettellebi/pilot_paper/blob/master/workflow/scripts/compare_params.R","code":"\nlibrary(tidyverse)\nlibrary(plotly)"},{"path":"hmm-parameter-optimisation.html","id":"read-in-files","chapter":"2 HMM parameter optimisation","heading":"2.1 Read in files","text":"","code":"\nCONC = list.files(\"/hps/nobackup/birney/users/ian/pilot/hmm_concordance_recode/\",full.names = T, recursive = T)\nKW = \"/hps/nobackup/birney/users/ian/pilot/kruskal_wallis/out.rds\""},{"path":"hmm-parameter-optimisation.html","id":"process","chapter":"2 HMM parameter optimisation","heading":"2.2 Process","text":"","code":"\nkw = readRDS(KW) %>% \n  dplyr::mutate(INTERVAL = as.numeric(INTERVAL)) %>% \n  dplyr::mutate(N_STATES = as.numeric(N_STATES))\n\nconc = purrr::map_dfr(CONC, readRDS) %>% \n  dplyr::group_by(INTERVAL, N_STATES) %>% \n  # get mean across groups A and B\n  dplyr::summarise(MEAN_CONC = mean(CONCORDANCE))\n#> `summarise()` has grouped output by 'INTERVAL'. You can\n#> override using the `.groups` argument.\n\ndf = dplyr::left_join(kw, conc, by = c(\"INTERVAL\", \"N_STATES\"))"},{"path":"hmm-parameter-optimisation.html","id":"plot","chapter":"2 HMM parameter optimisation","heading":"2.3 Plot","text":"","code":"\npal = colorspace::sequential_hcl(length(unique(df$N_STATES)), palette = \"ag_Sunset\")\n\nout_plot = df %>% \n  dplyr::mutate(N_STATES = factor(N_STATES, levels = sort(unique(N_STATES)))) %>% \n  dplyr::mutate(INTERVAL = factor(INTERVAL, levels = sort(unique(INTERVAL)))) %>% \n  ggplot(aes(MEAN_CONC, SUM_KW_STAT)) +\n    geom_point(aes(size = INTERVAL, colour = N_STATES),\n               alpha = 0.8) +\n    theme_bw() +\n    guides(size = guide_legend(title = \"Interval\\n(seconds)\"),\n           colour = guide_legend(title = \"N states\")) +\n    scale_colour_manual(values = pal) +\n    xlab(\"mean concordance between cross-validated HMM states\") +\n    ylab(\"summed Kruskal-Wallis statistic comparing frequency\\nof time spent in each HMM state across medaka lines\")\n\nplotly::ggplotly(out_plot)\n#> Warning: Using size for a discrete variable is not advised."},{"path":"model-covariates.html","id":"model-covariates","chapter":"3 Model covariates","heading":"3 Model covariates","text":"","code":"\nlibrary(tidyverse)\nlibrary(DT)"},{"path":"model-covariates.html","id":"read-in-data","chapter":"3 Model covariates","heading":"3.1 Read in data","text":"","code":"\nIN = \"/hps/nobackup/birney/users/ian/pilot/hmm_out/0.05/dist_angle/18.csv\"\n# Read \n\ndf = readr::read_csv(IN)\n#> Rows: 14651580 Columns: 15\n#> ── Column specification ────────────────────────────────────\n#> Delimiter: \",\"\n#> chr (6): assay, ref_fish, test_fish, tank_side, quadrant...\n#> dbl (9): date, time, frame, seconds, x, y, distance, ang...\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Controls (iCab-iCab pairings only)\n\ndf_control = df %>% \n  # Filter for only iCabs paired with iCabs\n  dplyr::filter(test_fish == \"icab\") %>% \n  # Get individual\n  tidyr::unite(date, time, quadrant, fish,\n               col = \"indiv\", \n               remove = F) %>% \n  # Group by assay and individual to get mean speed\n  dplyr::group_by(assay, date, time, quadrant, indiv) %>% \n  # Calculate mean speed\n  dplyr::summarise(mean_speed = mean(distance)) %>% \n  dplyr::ungroup() %>% \n  # Make date a factor\n  dplyr::mutate(date = as.factor(date))\n#> `summarise()` has grouped output by 'assay', 'date',\n#> 'time', 'quadrant'. You can override using the `.groups`\n#> argument.\n\n# DGE data frame\n\ndf_dge = df %>% \n  # remove iCab when paired with a different test fish\n  dplyr::filter(!(fish == \"ref\" & test_fish != \"icab\")) %>% \n  # Get individual\n  tidyr::unite(date, time, quadrant, fish,\n               col = \"indiv\", \n               remove = F) %>% \n  # add `line` %>% \n  dplyr::mutate(line = dplyr::case_when(fish == \"ref\" ~ ref_fish,\n                                        fish == \"test\" ~ test_fish))  %>% \n  # Group by assay and individual to get mean speed\n  dplyr::group_by(assay, date, time, quadrant, line, indiv) %>% \n  # Calculate mean speed\n  dplyr::summarise(mean_speed = mean(distance)) %>% \n  dplyr::ungroup()\n#> `summarise()` has grouped output by 'assay', 'date',\n#> 'time', 'quadrant', 'line'. You can override using the\n#> `.groups` argument.\n\n# SGE data frame \n\ndf_sge = df %>% \n  # keep only iCabs\n  ## add `line`\n  dplyr::mutate(line = dplyr::case_when(fish == \"ref\" ~ ref_fish,\n                                        fish == \"test\" ~ test_fish)) %>% \n  # keep only iCab test fishes\n  dplyr::filter(line == \"icab\") %>% \n  # Get individual\n  tidyr::unite(date, time, quadrant, fish,\n               col = \"indiv\", \n               remove = F) %>% \n  # Group by assay and individual to get mean speed\n  dplyr::group_by(assay, date, time, quadrant, test_fish, indiv) %>% \n  # Calculate mean speed\n  dplyr::summarise(mean_speed = mean(distance)) %>% \n  dplyr::ungroup()\n#> `summarise()` has grouped output by 'assay', 'date',\n#> 'time', 'quadrant', 'test_fish'. You can override using the\n#> `.groups` argument."},{"path":"model-covariates.html","id":"controls","chapter":"3 Model covariates","heading":"3.2 Controls","text":"","code":"\nmodel_fit = lm(mean_speed ~ assay + date + time + quadrant, data = df_control)\n\nsummary(model_fit)\n#> \n#> Call:\n#> lm(formula = mean_speed ~ assay + date + time + quadrant, data = df_control)\n#> \n#> Residuals:\n#>      Min       1Q   Median       3Q      Max \n#> -1.30927 -0.36602  0.06531  0.35224  1.44668 \n#> \n#> Coefficients:\n#>                   Estimate Std. Error t value Pr(>|t|)    \n#> (Intercept)      0.9551959  0.2385450   4.004 8.11e-05 ***\n#> assayopen_field  0.5160690  0.0663243   7.781 1.66e-13 ***\n#> date20190612     0.1976414  0.1579453   1.251 0.211931    \n#> date20190614     0.6531556  0.1675304   3.899 0.000123 ***\n#> date20190615     0.3596363  0.1514893   2.374 0.018318 *  \n#> date20190616     0.3963429  0.1478817   2.680 0.007826 ** \n#> time             0.0001001  0.0001381   0.725 0.469200    \n#> quadrantq2       0.1635167  0.0937967   1.743 0.082453 .  \n#> quadrantq3       0.1018693  0.0937967   1.086 0.278449    \n#> quadrantq4      -0.2136390  0.0937967  -2.278 0.023552 *  \n#> ---\n#> Signif. codes:  \n#> 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> Residual standard error: 0.5469 on 262 degrees of freedom\n#> Multiple R-squared:  0.2773, Adjusted R-squared:  0.2524 \n#> F-statistic: 11.17 on 9 and 262 DF,  p-value: 9.486e-15"},{"path":"model-covariates.html","id":"dge","chapter":"3 Model covariates","heading":"3.3 DGE","text":"","code":"\n## All variables with interactions\nmodel_dge = aov(mean_speed ~ assay * date * time * quadrant * line, data = df_dge)\n\ndge_vars = summary(model_dge)[[1]] %>% \n  dplyr::mutate(TOT_SS = sum(`Sum Sq`),\n                PROP_SS = `Sum Sq` / TOT_SS,\n                VAR_EXP = PROP_SS * 100)\n\nDT::datatable(dge_vars)\n## No interactions\nmodel_dge_noint = aov(mean_speed ~ assay + date + time + quadrant + line, data = df_dge)\n\ndge_vars_noint = summary(model_dge_noint)[[1]] %>% \n  dplyr::mutate(TOT_SS = sum(`Sum Sq`),\n                PROP_SS = `Sum Sq` / TOT_SS,\n                VAR_EXP = PROP_SS * 100)\n\nDT::datatable(dge_vars_noint)"},{"path":"model-covariates.html","id":"sge","chapter":"3 Model covariates","heading":"3.4 SGE","text":"","code":"\nmodel_sge = aov(mean_speed ~ assay * date * time * quadrant * test_fish, data = df_sge)\n\nsge_vars = summary(model_sge)[[1]] %>% \n  dplyr::mutate(TOT_SS = sum(`Sum Sq`),\n                PROP_SS = `Sum Sq` / TOT_SS,\n                VAR_EXP = PROP_SS * 100)\n\nDT::datatable(sge_vars)"},{"path":"exploration-of-states-1-and-3.html","id":"exploration-of-states-1-and-3","chapter":"4 Exploration of states 1 and 3","heading":"4 Exploration of states 1 and 3","text":"","code":"\nlibrary(tidyverse)"},{"path":"exploration-of-states-1-and-3.html","id":"read-in-and-process-data","chapter":"4 Exploration of states 1 and 3","heading":"4.1 Read in and process data","text":"Get DGE data frame","code":"\nIN = \"/hps/nobackup/birney/users/ian/pilot/hmm_out/0.05/dist_angle/18.csv\"\n\n# Create line recode vector\nline_vec = c(\"iCab\", \"HdrR\", \"HNI\", \"Kaga\", \"HO5\")\nnames(line_vec) = c(\"icab\", \"hdr\", \"hni\", \"kaga\", \"ho5\")\n\n# Read in file\n\ndf = readr::read_csv(IN) %>% \n  # recode angle to sit between 0 and 360\n  dplyr::mutate(angle_recode = ifelse(angle < 0,\n                                      180 + (180 + angle),\n                                      angle))\n#> Rows: 14651580 Columns: 15\n#> ── Column specification ────────────────────────────────────\n#> Delimiter: \",\"\n#> chr (6): assay, ref_fish, test_fish, tank_side, quadrant...\n#> dbl (9): date, time, frame, seconds, x, y, distance, ang...\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Recode states by mean distance\n\nrank_df = df %>% \n  dplyr::group_by(state) %>% \n  dplyr::summarise(mean_dist = mean(distance)) %>% \n  # rank\n  dplyr::arrange(mean_dist) %>% \n  dplyr::mutate(rank = 1:nrow(.))\n\nrecode_vec = rank_df %>% \n  dplyr::pull(rank)\nnames(recode_vec) = rank_df %>% \n  dplyr::pull(state)\n\n# Recode `state`\n\ndf = df %>% \n  dplyr::mutate(state_recode = dplyr::recode(state, !!!recode_vec))\ndge_df = df %>% \n  # remove iCab when paired with a different test fish\n  dplyr::filter(!(fish == \"ref\" & ref_fish == \"icab\" & test_fish != \"icab\")) %>% \n  # add `line` %>% \n  dplyr::mutate(line = dplyr::case_when(fish == \"ref\" ~ ref_fish,\n                                        fish == \"test\" ~ test_fish)) %>% \n  # recode line\n  dplyr::mutate(line = dplyr::recode(line, !!!line_vec)) %>% \n  # order line\n  dplyr::mutate(line = factor(line, levels = line_vec)) %>% \n  # mutate and factorise assay\n  dplyr::mutate(assay = stringr::str_replace(assay, \"_\", \" \"),\n                assay = factor(assay, levels = c(\"open field\", \"novel object\")))\n\n# Get proportions of time spent in each state\n\nstate_freq_dge = dge_df %>% \n  ## unite columns to get reads for each fish\n  tidyr::unite(date, time, quadrant, fish,\n               col = \"indiv\",\n               sep = \"_\") %>% \n  ## count rows per fish per state\n  dplyr::count(indiv, assay, line, state_recode) %>% \n  # add total row count per fish\n  dplyr::add_count(indiv, assay, line, wt = n, name = \"nn\") %>% \n  # get proportion of time fish spent in each state\n  dplyr::mutate(state_freq = n / nn)"},{"path":"exploration-of-states-1-and-3.html","id":"correlation-between-states-1-and-3","chapter":"4 Exploration of states 1 and 3","heading":"4.2 Correlation between states 1 and 3","text":"","code":"\n# Create palette\n\nnew_pal = grDevices::colorRampPalette(wesanderson::wes_palette(\"GrandBudapest1\"))\npal = new_pal(5)\nnames(pal) = line_vec\nstate_freq_dge %>% \n  # filter for states 1 and 3\n  dplyr::filter(state_recode == 1 | state_recode == 3) %>% \n  # put state_freq in different columns for the two states\n  tidyr::pivot_wider(id_cols = c(indiv, assay, line),\n                     names_from = state_recode,\n                     values_from = state_freq,\n                     names_prefix = \"freq_state_\") %>% \n  ggplot() +\n  geom_point(aes(freq_state_1, freq_state_3, colour = line),\n             alpha = 0.8) +\n  scale_colour_manual(values = pal) +\n  theme_bw() +\n  facet_grid(cols = vars(line), rows = vars(assay)) +\n  xlab(\"frequency of time spent in state 1\") +\n  ylab(\"frequency of time spent in state 3\")"},{"path":"exploration-of-states-1-and-3.html","id":"density-of-time-spent-in-states-1-and-3","chapter":"4 Exploration of states 1 and 3","heading":"4.3 Density of time spent in states 1 and 3","text":"","code":"\n# Create function for calculating density\n\nget_density <- function(x, y, ...) {\n  dens <- MASS::kde2d(x, y, ...)\n  ix <- findInterval(x, dens$x)\n  iy <- findInterval(y, dens$y)\n  ii <- cbind(ix, iy)\n  return(dens$z[ii])\n}\n\nset.seed(2)\npolar_fig = dge_df %>% \n  # filter for states 1 and 3\n  dplyr::filter(state_recode == 1 | state_recode == 3) %>% \n  # select random sample of 1e5 rows\n  #dplyr::slice_sample(n = 1e5) %>% \n  ## unite columns to get reads for each fish\n  tidyr::unite(date, time, quadrant, fish,\n               col = \"indiv\",\n               sep = \"_\") %>% \n  # group by line\n  dplyr::group_by(line) %>% \n  dplyr::mutate(density = get_density(distance, angle, n = 100)) %>% \n  ggplot() +\n  geom_point(aes(angle_recode, log10(distance), colour = density),\n             alpha = 0.1, size = 0.2) +\n  coord_polar() +\n  facet_grid(rows = vars(state_recode), cols = vars(line)) +\n  scale_color_viridis_c() +\n  theme_bw() +\n  scale_x_continuous(labels = c(0, 90, 180, 270),\n                     breaks = c(0, 90, 180, 270)) +\n  xlab(\"angle of travel\") +\n  ylab(expression(log[10](\"distance travelled in pixels\")))\n  \npolar_fig\n\nggsave(here::here(\"book/figs/misc/exploration_states_1_3/polar.png\"),\n       polar_fig,\n       device = \"png\",\n       width = 12,\n       height = 6,\n       units = \"in\",\n       dpi = 400)\nknitr::include_graphics(here::here(\"book/figs/misc/exploration_states_1_3/polar.png\"))\n#> Warning in knitr::include_graphics(here::here(\"book/figs/\n#> misc/exploration_states_1_3/polar.png\")): It is highly\n#> recommended to use relative paths for images. You had\n#> absolute paths: \"/hps/software/users/birney/ian/repos/\n#> pilot_paper/book/figs/misc/exploration_states_1_3/polar.png\""},{"path":"exploration-of-states-1-and-3.html","id":"combine-states-1-and-3","chapter":"4 Exploration of states 1 and 3","heading":"4.4 Combine states 1 and 3","text":"","code":"\n# Create function for calculating density\n\nget_density <- function(x, y, ...) {\n  dens <- MASS::kde2d(x, y, ...)\n  ix <- findInterval(x, dens$x)\n  iy <- findInterval(y, dens$y)\n  ii <- cbind(ix, iy)\n  return(dens$z[ii])\n}\n\nset.seed(2)\npolar_fig = dge_df %>% \n  # filter for states 1 and 3\n  dplyr::filter(state_recode == 1 | state_recode == 3) %>% \n  # make new column\n  dplyr::mutate(state_recode = \"states 1 and 3\") %>% \n  # select random sample of 1e5 rows\n  #dplyr::slice_sample(n = 1e5) %>% \n  ## unite columns to get reads for each fish\n  tidyr::unite(date, time, quadrant, fish,\n               col = \"indiv\",\n               sep = \"_\") %>% \n  # group by line\n  dplyr::group_by(line) %>% \n  dplyr::mutate(density = get_density(distance, angle, n = 100)) %>% \n  ggplot() +\n  geom_point(aes(angle_recode, log10(distance), colour = density),\n             alpha = 0.1, size = 0.2) +\n  coord_polar() +\n  facet_grid(rows = vars(state_recode), cols = vars(line)) +\n  scale_color_viridis_c() +\n  theme_bw() +\n  scale_x_continuous(labels = c(0, 90, 180, 270),\n                     breaks = c(0, 90, 180, 270)) +\n  xlab(\"angle of travel\") +\n  ylab(expression(log[10](\"distance travelled in pixels\")))\n  \npolar_fig\n\nggsave(here::here(\"book/figs/misc/exploration_states_1_3/polar.png\"),\n       polar_fig,\n       device = \"png\",\n       width = 12,\n       height = 6,\n       units = \"in\",\n       dpi = 400)"}]
