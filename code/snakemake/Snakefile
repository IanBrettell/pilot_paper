# Bash script to run on EBI cluster:
#
# conda activate snakemake
# snakemake \
#   --jobs 5000 \
#   --latency-wait 100 \
#   --cluster-config pilot_paper/code/snakemake/config/cluster.json \
#   --cluster 'bsub -g /snakemake_bgenie -J {cluster.name} -n {cluster.n} -M {cluster.memory} -o {cluster.output} -e {cluster.error}' \
#   --keep-going \
#   --rerun-incomplete \
#   --use-conda \
#   -s pilot_paper/code/snakemake/snakefile.py \
#   -p

# For rule track you need to use GPUs, which require a different bash script

# Import functions and packages

from os.path import join
import pandas as pd

# Load config file and provide content as config object

configfile: "pilot_paper/code/snakemake/config/config.yaml"

# Load samples to process

SAMPLES = pd.read_csv(config["samples_file"], comment="#", skip_blank_lines=True, index_col=0)

# Globals

ASSAYS = ["open_field", "novel_object"]
QUADRANTS = ["q1", "q2", "q3", "q4"]

# Rules

rule all:
    input:
        expand("split/{sample}_{quadrant}_{assay}.mp4",
            sample = SAMPLES.index,
            quadrant = QUADRANTS,
            assay = ASSAYS),
        expand("idtrackerai/session_{sample}_{quadrant}_{assay}/trajectories_wo_gaps.npy",
            sample = SAMPLES.index,
            quadrant = QUADRANTS,
            assay = ASSAYS)

rule split:
    input:
        join(config["input_dir"], "{sample}.avi")
    params:
        samples_file = config["samples_file"]
    output:
        "split/{assay}/{sample}_{quadrant}_{assay}.mp4"
    conda:
        config["python_env"]
    script:
        config["split_script"]

rule track:
    input:
        "split/{sample}_{quadrant}_{assay}.mp4"
#    params:
#        intensity = [SAMPLES.loc["{sample}", 'intensity_floor'], SAMPLES.loc["{sample}", 'intensity_ceiling']],
#        area = [SAMPLES.loc["{sample}", 'area_floor'], SAMPLES.loc["{sample}", 'area_ceiling']],
#        range = [0, SAMPLES.loc["{sample}", 'of_video_length']] if "{assay}" == "open_field" else [0, SAMPLES.loc["{sample}", 'no_video_length']],
#        session_name = "{sample}_{quadrant}_{assay}"
    output:
        "idtrackerai/session_{sample}_{quadrant}_{assay}/trajectories_wo_gaps.npy"
    singularity:
        config["idtrackerai_cont"]
#    conda:
#        config["idtrackerai_env"]
    shell:
        """
        set +u
        . activate idtrackerai
        {config[track_script]} {config[samples_file]} {input[0]}
        """
